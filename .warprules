# Typography App - Интеллект проекта

## Критические исправления

### Сохранение форматирования в DOCX (17.01.2025)
**Проблема 1**: При обработке текста все runs в параграфе объединялись в один, что приводило к потере форматирования (жирный, курсив и т.д.)

**Проблема 2**: После исправления слова начали слипаться на границах runs, так как типографика меняет длину текста (добавляя NBSP и другие символы)

**Решение**: Переработана функция `processDocxXml` в `app/api/process/route.ts`:
- Создаем карту соответствия между символами до и после обработки
- Отслеживаем добавленные спецсимволы (NBSP, thin space, non-breaking hyphen, dashes)
- Сохраняем исходную структуру runs и их форматирование
- Распределяем обработанный текст обратно по оригинальным runs с учетом изменений длины
- Сохраняем атрибут xml:space="preserve" если он есть

```typescript
// Старый подход (НЕПРАВИЛЬНЫЙ):
textNodes.first().text(processedText);
textNodes.slice(1).remove(); // Удаляли все runs кроме первого!

// Новый подход (ПРАВИЛЬНЫЙ):
runInfo.forEach((info, index) => {
  const originalLength = info.text.length;
  const newText = processedText.substring(processedPos, processedPos + originalLength);
  // Обновляем текст в каждом run, сохраняя форматирование
});
```

## Важные паттерны проекта

### Обработка DOCX структуры
- Элементы `<w:r>` (run) содержат форматирование текста
- Элементы `<w:t>` внутри run содержат сам текст
- Нельзя объединять runs - это ломает форматирование!

### Правила типографики
- Используется модульная система с приоритетами
- Правила применяются в порядке приоритета (от меньшего к большему)
- Каждое правило имеет name, priority, pattern, replacement и description

### Тестирование
- Все тесты были удалены 17.01.2025 для пересоздания
- При создании новых тестов учитывать NBSP после предлогов и союзов

## Известные особенности

1. **NBSP после предлогов**: Правила добавляют неразрывный пробел после односложных предлогов (в, к, с, у, о, я, и, а)
2. **Диалоги**: Тире в начале строки заменяется на длинное тире (EM_DASH)
3. **Числовые диапазоны**: Используется короткое тире (EN_DASH) без пробелов
4. **Word boundary (\b) и кириллица**: \b не работает с кириллическими символами в JavaScript regex
5. **Фамилии с инициалами**: Между фамилией и инициалами, а также между инициалами добавляется NBSP

### Проблема с фамилиями и инициалами (17.01.2025)
**Проблема**: Правило `surname_separate_initials` не срабатывало из-за \b в начале паттерна

**Решение**:
- Удален \b из паттернов для фамилий
- Добавлено правило `conjunction_after_initials` для обработки союзов после инициалов

### Радикальная очистка пробелов (январь 2025)
**Проблема**: Лишние пробелы в начале строк, символы абзаца ¶ в UI

**Решение**:
- Добавлено правило `remove_leading_spaces_comprehensive` с приоритетом -2
- Сохранение табуляций для поэзии: `(^|\r?\n)(\t*)[ \f\v]+`
- Радикальная очистка в processDocxXml: `processedText.replace(/^[ \t\u00A0\u2009]+/, '')`
- Финальная очистка после типографики: `processedText.replace(/^[ \t\u00A0\u2009]+/gm, '')`

### Автоматическое разбиение переносов строк (январь 2025)
**Добавлено**: Функция `processAllBreaks()` в processDocxXml

**Функционал**:
- Автоматическое преобразование <w:br/> элементов в новые параграфы
- Сохранение свойств параграфа (pPr) и run (rPr)
- Корректное разделение текста до и после переноса
- Циклическая обработка всех переносов в документе

### Файлы проекта (январь 2025)
**Основные файлы**:
- `/Volumes/Store1/Yandex.Disk.localized/www-yandex/Cursor/typography/` - корень проекта
- `app/api/process/route.ts` - основной API endpoint
- `lib/core/TextProcessorRU.ts` - русский процессор
- `lib/core/RussianTypographyRules.ts` - правила типографики
- `lib/core/TypographyCore.ts` - ядро системы
- `memory-bank/` - банк памяти проекта
- `package.json` - версия 0.1.1

### Конфигурация Next.js (январь 2025)
**Исправлено**: Убраны неподдерживаемые опции из next.config.js
- Удалены опции API, которые не поддерживаются в новых версиях Next.js
- Обновлена конфигурация для совместимости
